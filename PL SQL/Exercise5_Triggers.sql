
------------------------------------------------------
-- ðŸ”¥ Exercise 5: Triggers
------------------------------------------------------

------------------------------------------------------
-- Scenario 1: Update LastModified on Customer Update
------------------------------------------------------
ALTER TABLE customers ADD (LastModified DATE);

CREATE OR REPLACE TRIGGER UpdateCustomerLastModified
BEFORE UPDATE ON customers
FOR EACH ROW
BEGIN
    :NEW.LastModified := SYSDATE;
END;
/
------------------------------------------------------

------------------------------------------------------
-- Scenario 2: Log Transactions in AuditLog
------------------------------------------------------
CREATE TABLE AuditLog (
    audit_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    transaction_id NUMBER,
    action_date DATE,
    action_type VARCHAR2(20)
);

CREATE OR REPLACE TRIGGER LogTransaction
AFTER INSERT ON Transactions
FOR EACH ROW
BEGIN
    INSERT INTO AuditLog (transaction_id, action_date, action_type)
    VALUES (:NEW.transaction_id, SYSDATE, 'INSERT');
END;
/
------------------------------------------------------

------------------------------------------------------
-- Scenario 3: Enforce Transaction Rules
------------------------------------------------------
CREATE OR REPLACE TRIGGER CheckTransactionRules
BEFORE INSERT ON Transactions
FOR EACH ROW
DECLARE
    acc_balance NUMBER;
BEGIN
    -- Fetch account balance
    SELECT balance INTO acc_balance FROM accounts WHERE account_id = :NEW.account_id;

    -- Check for invalid withdrawals
    IF :NEW.transaction_type = 'WITHDRAW' AND :NEW.amount > acc_balance THEN
        RAISE_APPLICATION_ERROR(-20001, 'Withdrawal exceeds available balance');

    -- Check for invalid deposits
    ELSIF :NEW.transaction_type = 'DEPOSIT' AND :NEW.amount <= 0 THEN
        RAISE_APPLICATION_ERROR(-20002, 'Deposit amount must be positive');
    END IF;
END;
/
------------------------------------------------------
